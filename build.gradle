/*
 * Copyright 2017-2018 Aljoscha Grebe
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
buildscript {
    dependencies {
        classpath group: 'org.apache.commons', name: 'commons-text', version: '1.2'
    }
}

plugins {
    id 'java'
    id 'org.jetbrains.intellij' version '0.2.17'
    id 'com.github.ben-manes.versions' version '0.17.0'
}

sourceCompatibility = targetCompatibility = JavaVersion.VERSION_1_8

group = 'com.almightyalpaca.jetbrains.plugins.discord'
version = '0.6.0'

ext {
    github = 'https://github.com/Almighty-Alpaca/Intellij-Discord-Integration/'
}

intellij {
    version '2017.2.6'
    // version '2016.1.4'

    downloadSources = true

    updateSinceUntilBuild = false
}

repositories {
    jcenter()
    maven {
        name 'jitpack'
        url 'https://jitpack.io/'
    }
}

dependencies {
    compile group: 'club.minnced', name: 'Java-DiscordRPC', version: 'v1.3.1'

    compile group: 'org.jgroups', name: 'jgroups', version: '4.0.9.Final'
}

import org.apache.commons.text.StringEscapeUtils
import org.apache.tools.ant.filters.ReplaceTokens

processResources {
    eachFile { file ->
        if (file.path == 'META-INF/plugin.xml') {
            file.filter ReplaceTokens, tokens: [
                    DESCRIPTION: readResourceFile('DESCRIPTION.md'),
                    CHANGELOG  : readResourceFile('CHANGELOG.md')
            ]
        }
    }
}

String readResourceFile(String name) {
    String content = file(name).text

    content = content.trim()

    content = content.replaceAll('(\\n|^)##(.*)(\\n|$)', { matcher -> "${matcher[1]}<b>${matcher[2]}</b>${matcher[3]}" })

    content = content.replaceAll('\\[([^\\[]+)\\]\\(([^\\)]+)\\)', { matcher -> "<a href=\"${matcher[2]}\">${matcher[1]}</a>" })
    content = content.replaceAll('\\(#([0-9]+)\\)', { matcher -> "(<a href=\"${github}/issues/${matcher[1]}\">#${matcher[1]}</a>)" })

    content = content.replaceAll("\n- (.*)", { matcher -> "<li>${matcher[1]}</li>" })
    content = content.replaceAll("((?:<li>.*</li>)+)", { matcher -> "<ul>${matcher[1]}</ul>" })
    content = content.replaceAll('\\s*<li>\\s*', '<li>')
    content = content.replaceAll('\\s*</li>\\s*', '</li>')
    content = content.replaceAll('\\s*<ul>\\s*', '<ul>')
    content = content.replaceAll('\\s*</ul>\\s*', '</ul>')

    content = content.replace('\n', '<br>')

    content = StringEscapeUtils.escapeHtml4(content)

    return content
}
